#!/usr/bin/env python

import os
import sys
import subprocess

APP = os.environ.get('APP')
APP = sys.argv[1] or APP
APP_ROOT = os.path.join(os.environ.get('DINGO_ROOT'), APP)
CONFIG_FILE = os.path.join(APP_ROOT, 'env')
HOSTNAME_FILE = os.path.join(os.environ.get('DINGO_ROOT'), 'HOSTNAME')

if '.' in APP:
    HOSTNAME = APP
else:
    with open(HOSTNAME_FILE, 'r') as f:
        default_hostname = f.read()
    HOSTNAME = '%s.%s' % (APP, default_hostname.strip())


def port():
    pairs = {}
    with open(CONFIG_FILE, 'r') as f:
        for line in f:
            k, v = line.split('=', 1)
            pairs[k.strip()] = v.strip()

    if 'PORT' in pairs:
        return int(pairs['PORT'])
    return None


def is_ssl():
    path = os.path.join(APP_ROOT, 'ssl')
    if not os.path.isfile(os.path.join(path, 'server.crt')):
        return False
    if not os.path.isfile(os.path.join(path, 'server.key')):
        return False
    return True


def public_dir():
    path = os.path.join(APP_ROOT, 'root')
    public_dir = os.path.join(path, 'public')
    if os.path.isdir(public_dir):
        return public_dir
    public_dir = os.path.join(path, APP, 'public')
    if os.path.isdir(public_dir):
        return public_dir
    return None


TEMPLATE_UPSTREAM = 'upstream %(name)s { server 127.0.0.1:%(port)d; }'

TEMPLATE_SERVER = '''
server {
  listen [::]:80;
  listen 80;
  server_name %(hostname)s;

  access_log %(app_root)s/logs/%(name)s.access.log;
  error_log %(app_root)s/logs/%(name)s.error.log;
'''

TEMPLATE_SSL = '''
  listen [::]:443;
  listen 443;

  ssl on;
  ssl_certification %(app_root)s/ssl/server.crt;
  ssl_certification_key %(app_root)s/ssl/server.key;
  ssl_ciphers ECDHE-RSA-AES128-GCM-SHA256:ECDHE-RSA-RC4-SHA:ECDHE-RSA-AES128-SHA:AES128-GCM-SHA256:RC4:HIGH:!MD5:!aNULL:!EDH:!CAMELLIA;
  ssl_prefer_server_ciphers on;
  ssl_protocols TLSv1.2 TLSv1.1 TLSv1;
'''

TEMPLATE_PUBLIC = '''
root %(public_dir);
location ~* ^/[^\/]+\.(gif|jpg|jpeg|png|txt|ico)$ {
  expires 10d;
}
location ~* ^/[^\/]+\.(css|js)$ {
  if ($query_string) {
    expires 30d;
  }
}
'''

TEMPLATE_PROXY = '''
  location / {
    proxy_pass http://%(name)s;
    proxy_http_version 1.1;
    proxy_set_header Upgrade $http_upgrade;
    proxy_set_header Connection "upgrade";
    proxy_set_header Host $http_host;
    proxy_set_header X-Forwarded-Proto $scheme;
    proxy_set_header X-Forwarded-For $remote_addr;
    proxy_set_header X-Forwarded-Port $server_port;
    proxy_set_header X-Request-Start $msec;
  }
'''

def dynamic_config(port):
    template = TEMPLATE_UPSTREAM + TEMPLATE_SERVER
    if is_ssl():
        template += TEMPLATE_SSL

    pubdir = public_dir()
    if pubdir:
        template += TEMPLATE_PUBLIC

    template += TEMPLATE_PROXY
    template += '}'
    return template % dict(
        name=APP,
        hostname=HOSTNAME,
        port=port,
        app_root=APP_ROOT,
        public_dir=pubdir,
    )


def static_config():
    template = TEMPLATE_SERVER
    pubdir = public_dir()
    if not pubdir:
        pubdir = os.path.join(APP_ROOT, 'root')
    if is_ssl():
        template += TEMPLATE_SSL

    template += TEMPLATE_PUBLIC
    template += '}'
    return template % dict(
        name=APP,
        hostname=HOSTNAME,
        app_root=APP_ROOT,
        public_dir=pubdir,
    )


PORT = port()
if PORT:
    content = dynamic_config(PORT)
else:
    content = static_config()

with open(os.path.join(APP_ROOT, 'nginx.conf'), 'w') as f:
    f.write(content)

subprocess.call(['sudo', '/etc/init.d/nginx', 'reload'])
